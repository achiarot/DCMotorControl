
DC Motor PID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  00000346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000791  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000671  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ce  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e7  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e1  00000000  00000000  00001957  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 0d 01 	jmp	0x21a	; 0x21a <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	aa 30       	cpi	r26, 0x0A	; 10
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int main(void)
{

	// Setup the encoder pins and the motor control PWM pins
	DDRB &= (uint8_t)~((1<<PORTB0)|(1<<PORTB1));
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8c 7f       	andi	r24, 0xFC	; 252
  94:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PORTB2)|(1<<PORTB3);
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8c 60       	ori	r24, 0x0C	; 12
  9a:	84 b9       	out	0x04, r24	; 4
	// Turn on the pin change interupts
	PCICR |= (1<<PCIE0);
  9c:	e8 e6       	ldi	r30, 0x68	; 104
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	80 83       	st	Z, r24
	PCMSK0 |= (1<<PCINT0);
  a6:	eb e6       	ldi	r30, 0x6B	; 107
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24

	// Start the PWM signal
	TCCR1A |= (1<<COM1B1)|(1<<WGM10);
  b0:	e0 e8       	ldi	r30, 0x80	; 128
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 62       	ori	r24, 0x21	; 33
  b8:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS10);
  ba:	e1 e8       	ldi	r30, 0x81	; 129
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
	TCCR2A |= (1<<COM2A1)|(1<<WGM20);
  c4:	e0 eb       	ldi	r30, 0xB0	; 176
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	81 68       	ori	r24, 0x81	; 129
  cc:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20);
  ce:	e1 eb       	ldi	r30, 0xB1	; 177
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
	  
	// Set PWM to 0 to start
	OCR1BL = 0;
  d8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	OCR2A = 0;
  dc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>

	// Setup timer0 for control loop
	TCCR0A |= (1<<WGM01);
  e0:	84 b5       	in	r24, 0x24	; 36
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS02)|(1<<CS00);
  e6:	85 b5       	in	r24, 0x25	; 37
  e8:	85 60       	ori	r24, 0x05	; 5
  ea:	85 bd       	out	0x25, r24	; 37
	OCR0A = COUNT_FREQ/CTRL_FREQ-1;
  ec:	8c e7       	ldi	r24, 0x7C	; 124
  ee:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A);
  f0:	ee e6       	ldi	r30, 0x6E	; 110
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	80 83       	st	Z, r24
	// Initialize the variables
	encCount=0;
  fa:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <encCount+0x1>
  fe:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <encCount>
	spx=0;
 102:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 106:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	exLast=0;
 10a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <exLast+0x1>
 10e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <exLast>
volatile int16_t integrationSum;
volatile uint16_t spx;

const float degPerCnt = DEGREES_PER_ROTATION/(COUNTS_PER_ROTATION*ROTATIONS_PER_OUTPUT_ROTATION);

int main(void)
 112:	ff cf       	rjmp	.-2      	; 0x112 <main+0x82>

00000114 <__vector_14>:

/* Control loop
    Description:  This is the control loop PID portion of the controller. Allow the interrupts to continue while
    the control loop is running so that no steps are lost during the loop.
*/
ISR(TIMER0_COMPA_vect, ISR_NOBLOCK){
 114:	78 94       	sei
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	2f 93       	push	r18
 122:	3f 93       	push	r19
 124:	4f 93       	push	r20
 126:	5f 93       	push	r21
 128:	6f 93       	push	r22
 12a:	7f 93       	push	r23
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ef 93       	push	r30
 13a:	ff 93       	push	r31
  // Control loop
  uint16_t x = encCount;
 13c:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <encCount>
 140:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <encCount+0x1>
  int16_t ex = (spx-x);
 144:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 148:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 14c:	2c 1b       	sub	r18, r28
 14e:	3d 0b       	sbc	r19, r29
  integrationSum += ex;
 150:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <integrationSum>
 154:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <integrationSum+0x1>
 158:	82 0f       	add	r24, r18
 15a:	93 1f       	adc	r25, r19
 15c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <integrationSum+0x1>
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <integrationSum>

  int16_t output = ((KP*ex)+(KD*(ex-exLast)*CTRL_FREQ)+(KI*integrationSum/CTRL_FREQ))/KCONST;
 164:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <exLast>
 168:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <exLast+0x1>
 16c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <integrationSum>
 170:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <integrationSum+0x1>
 174:	b9 01       	movw	r22, r18
 176:	76 2f       	mov	r23, r22
 178:	66 27       	eor	r22, r22
 17a:	77 0f       	add	r23, r23
 17c:	77 0f       	add	r23, r23
 17e:	d9 01       	movw	r26, r18
 180:	a8 1b       	sub	r26, r24
 182:	b9 0b       	sbc	r27, r25
 184:	ea e6       	ldi	r30, 0x6A	; 106
 186:	f8 e1       	ldi	r31, 0x18	; 24
 188:	ae 9f       	mul	r26, r30
 18a:	c0 01       	movw	r24, r0
 18c:	af 9f       	mul	r26, r31
 18e:	90 0d       	add	r25, r0
 190:	be 9f       	mul	r27, r30
 192:	90 0d       	add	r25, r0
 194:	11 24       	eor	r1, r1
 196:	fb 01       	movw	r30, r22
 198:	e8 0f       	add	r30, r24
 19a:	f9 1f       	adc	r31, r25
 19c:	62 e3       	ldi	r22, 0x32	; 50
 19e:	64 9f       	mul	r22, r20
 1a0:	c0 01       	movw	r24, r0
 1a2:	65 9f       	mul	r22, r21
 1a4:	90 0d       	add	r25, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	6d e7       	ldi	r22, 0x7D	; 125
 1aa:	70 e0       	ldi	r23, 0x00	; 0
 1ac:	0e 94 3f 01 	call	0x27e	; 0x27e <__divmodhi4>
 1b0:	6e 0f       	add	r22, r30
 1b2:	7f 1f       	adc	r23, r31
 1b4:	77 23       	and	r23, r23
 1b6:	14 f4       	brge	.+4      	; 0x1bc <__vector_14+0xa8>
 1b8:	61 50       	subi	r22, 0x01	; 1
 1ba:	7c 4f       	sbci	r23, 0xFC	; 252
 1bc:	87 2f       	mov	r24, r23
 1be:	85 95       	asr	r24
 1c0:	85 95       	asr	r24
 1c2:	97 2f       	mov	r25, r23
 1c4:	99 0f       	add	r25, r25
 1c6:	99 0b       	sbc	r25, r25
  if (output>=0){
 1c8:	99 23       	and	r25, r25
 1ca:	2c f0       	brlt	.+10     	; 0x1d6 <__vector_14+0xc2>
    if (output>255){
      output = 255;
    }
    OCR1BL = output;
 1cc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    OCR2A = 0;
 1d0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 1d4:	07 c0       	rjmp	.+14     	; 0x1e4 <__vector_14+0xd0>
      output=255;
    }
    else{
      output*=-1;
    }
    OCR1BL = 0;
 1d6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  else{
    if(output<-255){
      output=255;
    }
    else{
      output*=-1;
 1da:	91 95       	neg	r25
 1dc:	81 95       	neg	r24
 1de:	91 09       	sbc	r25, r1
    }
    OCR1BL = 0;
    OCR2A = output;
 1e0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  
  /* Saving this for implementation later
  uint16_t dx = x-encLastCount;
  int16_t velocity = dx*CTRL_FREQ;
  */
  exLast = ex;
 1e4:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <exLast+0x1>
 1e8:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <exLast>
  encLastCount = x;
 1ec:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <encLastCount+0x1>
 1f0:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <encLastCount>
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <__vector_3>:

// Handle the change from
// Pin 8 and 9 are the pin change interrupt pins to be used - PB0 and PB1 respectively
ISR(PCINT0_vect){
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	2f 93       	push	r18
 226:	3f 93       	push	r19
 228:	4f 93       	push	r20
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
  // Anytime the pinstate changes on the two pins used for the encoder, we will read their state and decide the direction
  uint8_t encState = PINB&((1<<PORTB0)|(1<<PORTB1));
 22e:	43 b1       	in	r20, 0x03	; 3

  // We check the direction and either add or subtract from the encoder counter
  if((encState&(1<<PORTB0))>>PORTB0 == (encState&(1<<PORTB1))>>PORTB1){
 230:	24 2f       	mov	r18, r20
 232:	21 70       	andi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	41 fb       	bst	r20, 1
 238:	88 27       	eor	r24, r24
 23a:	80 f9       	bld	r24, 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	28 17       	cp	r18, r24
 240:	39 07       	cpc	r19, r25
 242:	51 f4       	brne	.+20     	; 0x258 <__vector_3+0x3e>
    encCount++;
 244:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encCount>
 248:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <encCount+0x1>
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <encCount+0x1>
 252:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <encCount>
 256:	09 c0       	rjmp	.+18     	; 0x26a <__vector_3+0x50>
  }
  else{
    encCount--;
 258:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <encCount>
 25c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <encCount+0x1>
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <encCount+0x1>
 266:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <encCount>
  }
}
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__divmodhi4>:
 27e:	97 fb       	bst	r25, 7
 280:	07 2e       	mov	r0, r23
 282:	16 f4       	brtc	.+4      	; 0x288 <__divmodhi4+0xa>
 284:	00 94       	com	r0
 286:	07 d0       	rcall	.+14     	; 0x296 <__divmodhi4_neg1>
 288:	77 fd       	sbrc	r23, 7
 28a:	09 d0       	rcall	.+18     	; 0x29e <__divmodhi4_neg2>
 28c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__udivmodhi4>
 290:	07 fc       	sbrc	r0, 7
 292:	05 d0       	rcall	.+10     	; 0x29e <__divmodhi4_neg2>
 294:	3e f4       	brtc	.+14     	; 0x2a4 <__divmodhi4_exit>

00000296 <__divmodhi4_neg1>:
 296:	90 95       	com	r25
 298:	81 95       	neg	r24
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__divmodhi4_neg2>:
 29e:	70 95       	com	r23
 2a0:	61 95       	neg	r22
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255

000002a4 <__divmodhi4_exit>:
 2a4:	08 95       	ret

000002a6 <__udivmodhi4>:
 2a6:	aa 1b       	sub	r26, r26
 2a8:	bb 1b       	sub	r27, r27
 2aa:	51 e1       	ldi	r21, 0x11	; 17
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <__udivmodhi4_ep>

000002ae <__udivmodhi4_loop>:
 2ae:	aa 1f       	adc	r26, r26
 2b0:	bb 1f       	adc	r27, r27
 2b2:	a6 17       	cp	r26, r22
 2b4:	b7 07       	cpc	r27, r23
 2b6:	10 f0       	brcs	.+4      	; 0x2bc <__udivmodhi4_ep>
 2b8:	a6 1b       	sub	r26, r22
 2ba:	b7 0b       	sbc	r27, r23

000002bc <__udivmodhi4_ep>:
 2bc:	88 1f       	adc	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	5a 95       	dec	r21
 2c2:	a9 f7       	brne	.-22     	; 0x2ae <__udivmodhi4_loop>
 2c4:	80 95       	com	r24
 2c6:	90 95       	com	r25
 2c8:	bc 01       	movw	r22, r24
 2ca:	cd 01       	movw	r24, r26
 2cc:	08 95       	ret

000002ce <_exit>:
 2ce:	f8 94       	cli

000002d0 <__stop_program>:
 2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <__stop_program>
